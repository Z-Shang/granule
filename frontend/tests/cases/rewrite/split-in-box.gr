data N (n : Nat) where
  Z : N 0;
  S : forall {n : Nat}. (m : N n) -> N (n+1)

data Vec (n : Nat) (a : Type) where
  Nil : Vec 0 a;
  Cons : forall {n : Nat} . a  -> Vec n a -> Vec (n+1) a

take : forall {a : Type, n : Nat, k : Nat} . N k -> (Vec (n+k) a) [0..1] -> Vec k a
take Z [vec] = ?;
take (S m0) [vec] = {! m0 vec !}