data Bool = True | False


boolEq : Bool -> Bool -> Bool
boolEq True True   = True;
boolEq False False = True;
boolEq True False  = False;
boolEq False True  = False

leak : Bool [Private] → Bool [Public]
leak [x] = -- ghost : dunno
  case boolEq True x of 
    True ->  -- ghost : 1
             [True]; 
    False -> [False]

-- indicates a bug in Granule
-- leak' : () [Public] -> Bool [Private] → Bool [Public]
-- leak' cap [x] = -- ghost : dunno
--       case boolEq True x of 
--         True ->  
--           (case cap of
--             [()] -> -- ghost : 1 
--                    [True]);
--         False -> 
--            (case cap of
--             [()] -> [False])
