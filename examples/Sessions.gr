import Bool
import Vec

fooClient : Chan (Send Bool (Recv Int End)) → Int
fooClient c =
  let c      = send c True;
      (n, c) = recv c;
      _      = close c
  in n

fooServer : Chan (Dual (Send Bool (Recv Int End))) → ()
fooServer c =
  let (b, c) = recv c;
      c      = if b then send c 1 else send c 0
  in close c

example : Int
example =
  let c = forkLinear fooServer
  in  fooClient c

-- Given a one-shot channel for some sending a value of type 'a'
-- but which is able to be reused 'n' times, and a vector of
-- length 'n', then send every element of the vector on the
-- channel
sendVec : ∀ {n : Nat, a : Type} .
   (Chan (Send a End)) [n] → Vec n a → ()

sendVec [c] Nil = ();
sendVec [c] (Cons x xs) =
       let c'  = send c x;
           _   = close c'
       in sendVec [c] xs

recvVec : ∀ {n : Nat, a : Type} .
   N n → (Chan (Recv a End)) [n] → (Vec n a)
recvVec Z [c] = Nil;
recvVec (S n) [c] =
       let (x, c') = recv c;
           _       = close c';
           xs      = recvVec n [c]
       in Cons x xs

example2 : ∀ {n : Nat, a : Type}
         . N n → Vec n a → (Vec n a)
example2 n list =
  let c = fork (λc → sendVec c list)
  in recvVec n c

main : (Vec 5 Int, Int)
main =
  let
    xs = example2 (S (S (S (S (S Z))))) (Cons 1 (Cons 1 (Cons 2 (Cons 3 (Cons 5 Nil)))));
    a = example
  in (xs, a)
